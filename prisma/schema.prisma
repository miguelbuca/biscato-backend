// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WorkType {
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
}

enum InteractionType {
  React
  Comment
}

enum StatusType {
  ACTIVE
  INACTIVE
  AWAY
  AVAILABLE
  BUSY
  OFFLINE
  ONLINE
  ON_HOLD
  IN_PROGRESS
  COMPLETED
  PENDING
  PAUSED
  UNDECIDED
  IN_PROCESS
  UNDER_REVIEW
  CANCELED
  BLOCKED
  RELEASED
  UNDER_MAINTENANCE
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status StatusType? @default(ACTIVE)

  email String @unique
  hash  String

  firstName String?
  lastName  String?

  contracts Contract[]
  applications Application[]
  persons   Person[]
  skills    Skill[]
  works     Work[]
  ratings   Rating[]

  interactions Interaction[]

  @@map("users")
}

model Address {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status StatusType? @default(ACTIVE)

  lat Float?
  lng Float?

  name String

  description String?

  person Person?
  work   Work?

  @@map("address")
}

model Person {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status StatusType? @default(ACTIVE)

  phoneNumber String?
  avatar      String?

  nif      String
  birthday DateTime

  userId Int
  user   User @relation(fields: [userId], references: [id])

  addressId Int     @unique
  addresses Address @relation(fields: [addressId], references: [id])

  @@map("persons")
}

model SkillType {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status StatusType? @default(ACTIVE)

  svgXml String?

  background String?

  name   String
  skills Skill[]

  works Work[]

  @@map("skillTpes")
}

model Skill {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status StatusType? @default(ACTIVE)

  name        String
  description String?

  skillTypeId Int?
  skillType   SkillType? @relation(fields: [skillTypeId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("skills")
}

model Work {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status StatusType? @default(ACTIVE)

  title String

  costPerHour Decimal
  description String?

  totalTime Int

  time WorkType

  term String?

  userId Int
  user   User @relation(fields: [userId], references: [id])

  addressId Int?     @unique()
  address   Address? @relation(fields: [addressId], references: [id])

  interactions Interaction[]
  applications Application[]

  skillTypeId Int
  skillType   SkillType @relation(fields: [skillTypeId], references: [id])

  rating   Rating?
  contract Contract?

  @@map("works")
}

model Rating {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status StatusType? @default(ACTIVE)

  workId Int  @unique
  work   Work @relation(fields: [workId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("ratings")
}

model Interaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status StatusType? @default(ACTIVE)

  type InteractionType

  workId Int
  work   Work @relation(fields: [workId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("interactions")
}

model Contract {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status StatusType? @default(ACTIVE)

  workId Int  @unique
  work   Work @relation(fields: [workId], references: [id])

  hiredId Int
  hired   User @relation(fields: [hiredId], references: [id])

  @@map("contracts")
}

model Application {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status StatusType? @default(ACTIVE)

  workId Int  @unique
  work   Work @relation(fields: [workId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("applications")
}
